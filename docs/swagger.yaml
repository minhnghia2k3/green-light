basePath: /v1
definitions:
  data.Metadata:
    properties:
      current_page:
        type: integer
      first_page:
        type: integer
      last_page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  data.Movie:
    properties:
      created_at:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      runtime:
        description: <- Custom Runtime `type`
        type: integer
      title:
        type: string
      version:
        type: integer
      year:
        type: integer
    type: object
  data.User:
    properties:
      activated:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      version:
        type: integer
    type: object
  main.Error:
    properties:
      error:
        type: string
    type: object
  main.Input:
    properties:
      genres:
        description: Don't need to set to a pointer, bc slices already heave zero-values
          nil
        items:
          type: string
        type: array
      runtime:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  main.ListMovies:
    properties:
      data:
        $ref: '#/definitions/data.Movie'
      metadata:
        $ref: '#/definitions/data.Metadata'
    type: object
  main.LoginInput:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: myP4SSw3rd
        type: string
    type: object
  main.MovieResponse:
    properties:
      movie:
        $ref: '#/definitions/data.Movie'
    type: object
  main.RegisterUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  main.Status:
    properties:
      status:
        type: string
      system_information:
        $ref: '#/definitions/main.SystemInformation'
    type: object
  main.SystemInformation:
    properties:
      environment:
        type: string
      version:
        type: string
    type: object
  main.TokenInput:
    properties:
      token:
        type: string
    type: object
  main.TokenResponse:
    properties:
      authentication_token:
        type: string
    type: object
  main.UserResponse:
    properties:
      user:
        $ref: '#/definitions/data.User'
    type: object
info:
  contact:
    email: brozennvn@gmail.com
    name: API Support
    url: https://github.com/minhnghia2k3
  description: This is public API for movies management
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  termsOfService: https://github.com/minhnghia2k3/
  title: Greenlight Public API
  version: "1.0"
paths:
  /healthcheck:
    get:
      description: show server status and information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.Status'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      summary: Show server information
      tags:
      - Server
  /movies:
    delete:
      consumes:
      - application/json
      description: delete a movie record
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: update movie input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.Input'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.MovieResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      security:
      - Bearer: []
      summary: Delete movie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: show list movies, page = 1, page_size=10 by default.
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page_size
        in: query
        name: page_size
        type: integer
      - description: title
        in: query
        name: title
        type: string
      - description: genres
        in: query
        name: genres
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ListMovies'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      security:
      - Bearer: []
      summary: List movies
      tags:
      - Movies
    patch:
      consumes:
      - application/json
      description: update an existing movie record
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - collectionFormat: csv
        description: Don't need to set to a pointer, bc slices already heave zero-values
          nil
        in: query
        items:
          type: string
        name: genres
        type: array
      - in: query
        name: runtime
        type: integer
      - in: query
        name: title
        type: string
      - in: query
        name: year
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      security:
      - Bearer: []
      summary: Update movie
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: handlers receives Input, validate it then create a new movie record
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      security:
      - Bearer: []
      summary: Create movie
      tags:
      - Movies
  /movies/{id}:
    get:
      consumes:
      - application/json
      description: get movie by provided movie id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ListMovies'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      security:
      - Bearer: []
      summary: Get movie by id
      tags:
      - Movies
  /tokens/authentication:
    post:
      consumes:
      - application/json
      description: login account by email and password
      parameters:
      - description: Login parameters
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/main.LoginInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      summary: Create authentication token
      tags:
      - Authentications
  /users:
    post:
      consumes:
      - application/json
      description: register user account
      parameters:
      - description: register user input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      summary: Register account
      tags:
      - Users
  /users/activated:
    put:
      consumes:
      - application/json
      description: activate user account
      parameters:
      - description: plain text token input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.TokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/main.Error'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/main.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.Error'
      summary: Activate user account
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
